{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Lexurgy",
    "patterns": [
        { "include": "#comment" },
        { "include": "#keywords" },
        { "include": "#constants" },
        { "include": "#matrix" },
        { "include": "#symbol" },
        { "include": "#feature" },
        { "include": "#diacritic" },
        { "include": "#element" },
        { "include": "#class" },
        { "include": "#class-ref" },
        { "include": "#capture-ref" },
        { "include": "#rule-name" },
        { "include": "#rule-control-flow" },
        { "include": "#rule-modifier" },
        { "include": "#operators" }
    ],
    "repository": {
        "comment": {
            "name": "comment.line.number-sign",
            "match": "\\s*#.*"
        },
        "feature": {
            "begin": "^([Ff]eature)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.feature.lexurgy"
                }
            },
            "patterns": [{
                    "include": "#feature-category"
                },
                {
                    "include": "#feature-list"
                },
                {
                    "include": "#feature-binary"
                }
            ],
            "end": "(?=#|\\n)"
        },
        "symbol": {
            "begin": "^([Ss]ymbol) ",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.symbol.lexurgy"
                }
            },
            "patterns": [{
                    "include": "#symbol-name"
                },
                {
                    "include": "#matrix"
                }
            ],
            "end": "(?=#|\\n)"
        },
        "diacritic": {
            "begin": "^([Dd]iacritic) ",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.symbol.lexurgy"
                }
            },
            "patterns": [{
                    "include": "#diacritic-modifier"
                },
                {
                    "include": "#diacritic-name"
                },
                {
                    "include": "#matrix"
                }
            ],
            "end": "(?=#|\\n)"
        },
        "class": {
            "begin": "^([Cc]lass) ",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.class.lexurgy"
                }
            },
            "patterns": [{
                    "include": "#class-name"
                },
                {
                    "include": "#symbol-list"
                }
            ],
            "end": "(?=#|\\n)"
        },
        "element": {
            "name": "keyword.other.element.lexurgy",
            "match": "(^|\\s)([Ee]lement)(\\s|$)"
        },
        "rule-name": {
            "name": "entity.name.class.rule-name.lexurgy",
            "match": "^[A-Za-z0-9]+(-([A-Za-z0-9]+))*(?=.*?:)"
        },
        "rule-control-flow": {
            "name": "keyword.control.rule-control-flow.lexurgy",
            "match": "([Tt]hen|[Ee]lse)"
        },
        "rule-modifier": {
            "name": "storage.modifier.rule-modifier.lexurgy",
            "match": "([Pp]ropagate|LTR|Ltr|ltr|RTL|Rtl|rtl)"
        },
        "class-ref": {
            "name": "variable.other.class-ref.lexurgy",
            "match": "\\@[A-Za-z0-9]+"
        },
        "capture-ref": {
            "name": "string.quoted.other.capture-ref.lexurgy",
            "match": "\\$[0-9]+"
        },
        "keywords": {
            "name": "keyword.other.lexurgy",
            "match": "(^|\\s)(unchanged|explicit|clear)(\\s|$)"
        },
        "constants": {
            "name": "constant.lexurgy",
            "patterns": [
                { "name": "constant.language.syl.lexurgy", "match": "\\<[Ss]yl\\>" }
            ]
        },

        "symbol-list": {
            "name": "meta.symbol-list.lexurgy",
            "begin": "\\{",
            "end": "\\}",
            "patterns": [{ "include": "#symbol-name" }, { "include": "#class-ref" }]
        },
        "feature-list": {
            "name": "meta.feature-list.lexurgy",
            "begin": "\\(",
            "end": "\\)",
            "patterns": [{
                "include": "#feature-value"
            }]
        },
        "feature-binary": {
            "name": "keyword.operator.binary-feature.lexurgy",
            "match": "\\+",
            "patterns": [{
                "include": "#feature-value"
            }]
        },
        "matrix": {
            "name": "meta.matrix.lexurgy",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [{
                "include": "#feature-value"
            }]
        },
        "feature-value": {
            "name": "support.type.property-name.feature-value.lexurgy",
            "match": "[A-Za-z0-9]+"
        },
        "class-name": {
            "name": "variable.other.class-name.lexurgy",
            "match": "[A-Za-z0-9]+"
        },
        "symbol-name": {
            "name": "string.quoted.single.symbol-name.lexurgy",
            "match": "((\\\\.)|[^ \\n\\r,.=>()*\\[\\]{}+?\/\\-\\\\-_:!~$@#&])+"
        },
        "feature-category": {
            "name": "support.type.feature-category.lexurgy",
            "match": "((\\\\.)|[^ \\n\\r,.=>()*\\[\\]{}+?\/\\-\\\\-_:!~$@#&])+"
        },
        "diacritic-name": {
            "name": "string.quoted.single.diacritic-name.lexurgy",
            "match": "([A-Za-z0-9]|(\\\\.)|[^ \\n\\r,.=>()*\\[\\]{}+?\/\\-\\\\-_:!~$@#&])+"
        },
        "diacritic-modifier": {
            "name": "storage.modifier.diacritic.lexurgy",
            "match": "\\s\\(([Bb]efore)|([Aa]fter)|([Ff]loating)\\)\\s"
        },
        "operators": {
            "name": "keyword.operator.lexurgy",
            "patterns": [{
                    "name": "keyword.operator.null.lexurgy",
                    "match": "\\*"
                },
                {
                    "name": "keyword.operator.negate.lexurgy",
                    "match": "\\!"
                },
                {
                    "name": "keyword.operator.syllable-boundary.lexurgy",
                    "match": "\\."
                },
                {
                    "name": "keyword.operator.word-boundary.lexurgy",
                    "match": "\\${1,2}"
                },
                {
                    "name": "keyword.operator.intersection.lexurgy",
                    "match": "\\&\\!?"
                },
                {
                    "name": "keyword.operator.change.lexurgy",
                    "match": "=>"
                },
                {
                    "name": "keyword.operator.condition.lexurgy",
                    "match": "/{1,1}"
                },
                {
                    "name": "keyword.operator.exclusion.lexurgy",
                    "match": "//"
                },
                {
                    "name": "keyword.operator.at-least-one.lexurgy",
                    "match": "\\+"
                },
                {
                    "name": "keyword.operator.optional.lexurgy",
                    "match": "\\?"
                },
                {
                    "name": "keyword.operator.anchor.lexurgy",
                    "match": "_"
                },
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        }
    },
    "scopeName": "source.lexurgy"
}